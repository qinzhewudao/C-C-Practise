/*
牛牛在二维坐标系中画了N个点，且都是整点。现在牛牛想画出一个矩形，使得这N个点都在矩形内或者在矩形上。
 矩形的边均平行于坐标轴。牛牛希望矩形的面积最小。请你帮助牛牛计算下最小矩形的面积。

输入描述:
首先输入一个正整数N表示点的个数（2 <= N <= 50）  
接下来N行每行两个整数x, y，表示该点的坐标。绝对值均小于等于100.


输出描述:
一个整数表示最小矩形的面积。



输入例子:
2

0 1

1 0



输出例子:
1
*/
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main()
{
   int N;
   while(cin>>N)
   {
       vector<int> l(N);
       vector<int> w(N);
       for(int i=0;i<N;++i)cin>>l[i]>>w[i];    
       sort(l.begin(),l.end());
       sort(w.begin(),w.end());
       cout<<(l[N-1]-l[0])*(w[N-1]-w[0])<<endl;//横坐标最大差值与纵坐标最大差值的乘积便是最小矩形
       l.clear();
       w.clear();
   }
   return  0; 
}