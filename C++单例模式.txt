#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<algorithm>
using namespace std;

class Singleton
{
public :
    static Singleton* GetInstance();
private:
    Singleton(){};
    static Singleton *m_pInstance;
    class CGarbo
    {
    public:
        ~CGarbo()
        {
            if(Singleton::m_pInstance)
                delete Singleton::m_pInstance;
        };
    };
    static CGarbo Garbo;
};

Singleton* Singleton::m_pInstance = NULL;
Singleton* Singleton::GetInstance()
{
    if(m_pInstance == NULL)
        m_pInstance = new Singleton();
    return m_pInstance;
}
/*该类有以下特征：

◆它的构造函数是私有的，这样就不能从别处创建该类的实例。

◆它有一个唯一实例的静态指针m_pInstance，且是私有的。

◆它有一个公有的函数，可以获取这个唯一的实例，并在需要的时候创建该实例。



3. 但它仍然存在问题，m_pInstance指向的空间什么时候释放呢？更严重的问题是，这个实例的析构操作什么时候执行？ 如果在类的析构行为中有必须的操作，比如关闭文件，释放外部资源，那么上面所示的代码无法实现这个要求。我们需要一种方法，正常地删除该实例。

妥善的方法是让类自己在合适的时候把自己删除。

程序在结束的时候，系统会自动析构所有的全局变量。事实上，系统也会析构所有的类的静态成员变量，就像这些静态成员也是全局变量一样。利用这个特征，我们可以在C++单例模式类中定义一个这样的静态成员变量，而它的唯一工作就是在析构函数中删除单例类的实例。如下面的代码中的CGarbo类（Garbo意为垃圾工人）：

类CGarbo被定义为CSingleton的私有内嵌类，以防该类被在其它地方滥用。

在程序运行结束时，系统会调用CSingleton的静态成员Garbo的析构函数，该析构函数会删除单例的唯一实例。

使用这种方法释放单例对象有以下特征：

◆在单例类内部定义专有的嵌套类。

◆在单例类内定义私有的专门用于释放的静态成员。

◆利用程序在结束时析构全局变量的特性，选择最终的释放时机。

◆使用C++单例模式的代码不需要任何操作，不必关心对象的释放。*/
