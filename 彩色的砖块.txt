/*
小易有一些彩色的砖块。每种颜色由一个大写字母表示。各个颜色砖块看起来都完全一样。现在有一个给定的字符串s,s中每个字符代表小易的某个砖块的颜色。小易想把他所有的砖块排成一行。如果最多存在一对不同颜色的相邻砖块,那么这行砖块就很漂亮的。请你帮助小易计算有多少种方式将他所有砖块排成漂亮的一行。(如果两种方式所对应的砖块颜色序列是相同的,那么认为这两种方式是一样的。)
例如: s = "ABAB",那么小易有六种排列的结果:
"AABB","ABAB","ABBA","BAAB","BABA","BBAA"
其中只有"AABB"和"BBAA"满足最多只有一对不同颜色的相邻砖块。
输入描述:

输入包括一个字符串s,字符串s的长度length(1 ≤ length ≤ 50),s中的每一个字符都为一个大写字母(A到Z)。



输出描述:

输出一个整数,表示小易可以有多少种方式。


输入例子1:

ABAB


输出例子1:

2
*/
/*
其实是一道很简单的题，不要被全排列迷惑了，不需要做全排列
统计字符种类就好
只有一种字符那肯定只有一种
两种字符有两种
两种以上 不可能出现
而且这是第一道题，如果要做全排列，岂不是这次笔试很难，讲道理
笔试题不会这么麻烦
还是自己太蠢，被出题人骗了
递归全排列超时，只能得一半的分
*/
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<map>
using namespace std;

vector<string> strs;
bool IsSwap(string::iterator pBegin,string::iterator pEnd) {
        string::iterator it;
        for(it=pBegin;it!=pEnd;it++) {
            if(*it==*pEnd) return false;
        }
        return true;
    }
/*
    递归实现全排列,要想除去重复的排列,关键在于理解递归的过程
*/
void FullArrange(string &str,string::iterator pBegin)
{
    static int i;
    if(!(*pBegin))
    {
        strs.push_back(str);
    }
    else
    {
        for(string::iterator it=pBegin;*it;it++)
        {
            if(!IsSwap(pBegin,it)) continue;
            swap(*pBegin,*it);
            FullArrange(str,pBegin+1);
            swap(*pBegin,*it);
        }
    }
}

void getBeautiful(string str)//自己写的 递归的全排列实现
{
    int count = 0;
    string::iterator pBegin=str.begin();
    FullArrange(str,pBegin);
    for(int i=0;i<strs.size();i++)
    {
        int countdiff = 0;
        for(int j=1;j<strs[0].size();j++)
        {
            if(strs[i][j] != strs[i][j-1])
                countdiff++;
        }
        if(countdiff < 2)
        {
           count++;
           //cout<<strs[i]<<endl;;
        }

    }
    cout<<count<<endl;
}

void getBeautiful2(string str)//调用系统的全排列实现
{
  sort(str.begin(),str.end());
  do {
    strs.push_back(str);
  } while ( next_permutation(str.begin(),str.end()));    ///获取下一个较大字典序排列
    int count = 0;
    for(int i=0;i<strs.size();i++)
    {
        int countdiff = 0;
        for(int j=1;j<strs[0].size();j++)
        {
            if(strs[i][j] != strs[i][j-1])
                countdiff++;
        }
        if(countdiff < 2)
        {
           count++;
           //cout<<strs[i]<<endl;;
        }

    }
    cout<<count<<endl;
}

void getBeautiful3(string str)
{
    map<char,int> hash;
    for(int i=0;i<str.size();++i)
    {
        hash[str[i]]++;
    }
    if(hash.size() == 1)
        cout<<1<<endl;
    else if(hash.size() == 2)
        cout<<2<<endl;
    else
        cout<<0<<endl;

}



int main()
{
    string str;
    while(cin>>str)
    {
       getBeautiful3(str);
    }
    strs.clear();
    return 0;
}
