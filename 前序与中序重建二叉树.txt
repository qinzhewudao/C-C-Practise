/*输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假
设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前
序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则
重建二叉树并返回。*/
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if(pre.size()==0 || vin.size()==0)
            return NULL;
        
        TreeNode* result = new TreeNode(pre[0]);
        int site = 0;
        for(int i=0;i<vin.size();++i)
        {
           if(vin[i]==pre[0])
           {
              site = i;
              break;
           }
        }
        vector<int> leftpre(pre.begin()+1,pre.begin()+site+1);
        vector<int> leftvin(vin.begin(),vin.begin()+site);
        
        vector<int> rightpre(pre.begin()+site+1,pre.end());
        vector<int> rightvin(vin.begin()+site+1,vin.end());
        
        result->left = reConstructBinaryTree(leftpre,leftvin);
        result->right = reConstructBinaryTree(rightpre,rightvin);
        
        return result;
    }
};