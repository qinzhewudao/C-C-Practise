/*
时间限制：1秒 空间限制：32768K 热度指数：72516
本题知识点： 数组
算法知识视频讲解
题目描述
HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。你会不会被他忽悠住？(子向量的长度至少是1)
*/

class Solution {
public:
    int FindGreatestSumOfSubArray(vector<int> array) {
        int temp = array[0];
        int sum = temp;
        for(int i=1;i<array.size();++i)//0已经统计过了
        {
            temp += array[i];
            if(temp>sum)
                sum = temp;
            if(temp<0)//该算法在每次元素累加和小于0时，从下一个元素重新开始累加
                temp = 0;
        }
        return sum;
    }
};

/*
显然，该算法的时间复杂度O（n）。该算法理解起来应该不难，但是要想出来可就不容易了。另外，该算法的一个附带的有点是：它只对数据进行一次扫描，一旦元素被读入并被处理，它就不再需要被记忆。因此，如果数组在磁盘或磁带上，他就可以被顺序读入，在主存中不必存储数组的任何部分。不仅如此，在任意时刻，该算法都能对它已经读入的数据给出最大子数组。具有这种特性的算法叫做联机算法。*/