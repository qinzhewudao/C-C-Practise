class Solution {
public:
    vector<int> printMatrix(vector<vector<int> > matrix) {
        vector<int> result;
        result.clear();
        int row = matrix.size();//行数
        int col = matrix[0].size();//列数
        int circle = ((row<col?row:col)-1)/2+1;//圈数 因为可能不是正方形
        for(int i=0;i<circle;++i)
        {
            for(int j=i;j<col-i;++j)//从左到右
                result.push_back(matrix[i][j]);
            for(int k=i+1;k<row-i;k++)//从上到下
                result.push_back(matrix[k][col-1-i]);
            for(int m=col-i-2;(m>=i)&&(row-i-1!=i);m--)//判断是否会重复打印(从右向左的每行数据)
                result.push_back(matrix[row-i-1][m]);//例如只有三行，就不必打印第二圈的从右到左
            for(int n=row-i-2;(n>i)&&(col-i-1!=i);n--)//判断是否会重复打印(从下往上的每一列数据)
                result.push_back(matrix[n][i]);//同从右到左的重复判断
        }
        return result;
    }
};


/*
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
特别注意不是正方形的情况，例如只有一列
*/