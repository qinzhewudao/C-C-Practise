/*
有两个排序数组A1和A2，内存在A1的末尾有足够多的空余空间容纳A2，实现一个函数，把A2
插入到A1，并且是有序的。
*/
#include <iostream>
using namespace std;
#define abs(a) ((a>0)?(a):-(a))
#define max(a,b) ((a>b)?(a):(b))

void fun(int a[],int len1,int b[],int len2)
{
    int i = len1+len2;
    i--;
    len1--;
    len2--;
    while(len1>=0&&len2>=0)
    {
        if(a[len1]>b[len2])
        {
           a[i--]=a[len1--];
        }
        else
        {
           a[i--]=b[len2--];
        }
    }
    while(len1>=0)
    {
        a[i--]=a[len1--];
    }
    while(len2>=0)
    {
        a[i--]=b[len2--];
    }
}

int foo(int x,int y)//螺旋数组坐标求值
{
    int abx=abs(x);
    int aby=abs(y);
    int abmax=max(abx,aby);
    int result = 4*abmax*abmax+1;
    int dis;
    if(x>0 && y>0)dis = -2*abmax+x-y;
    if(x>0 && y<0)dis = 2*abmax+x-y;
    if(x<0 && y>0)dis = 2*abmax+x-y;
    if(x<0 && y<0)dis = 2*abmax+x-y;
    return result+dis;
}
int main()
{
    int a[10] = {12,13,14,15};
    int b[6] = {1,4,5,9,10};
    int len1 = 4;
    int len2 = 5;
    int num3 = 3;
    int num4 = 4;

    int max2 = ((num3+num4)+abs(num3-num4))/2;
    cout<<max2<<endl;

    int numsub = num3-num4;
    char *str[2]={"num3 large","num4 large"};
    numsub = unsigned(numsub)>>(sizeof(int)*8-1);
/*为什么要unsigned(numsub)
unsigned(numsub)将numsub变为无符号整形, 这样右移运算时，高位补0； 而负数的右移运算将高位补1
最后出来的结果 要么是0，要么是1*/
    cout<<str[numsub]<<endl;

    num3 = num3^num4;   //用位运算交换两个数，优点在于不会越界
    num4 = num3^num4;
    num3 = num3^num4;
    cout<<"num3:"<<num3<<"   "<<"num4:"<<num4<<endl;

    numsub = num3-num4;
    numsub = unsigned(numsub)>>(sizeof(int)*8-1);
    cout<<str[numsub]<<endl;

    fun(a,len1,b,len2);
    for (int i=0; i<len1+len2; i++)
    {
        cout<<a[i]<<" ";
    }
    cout<<endl;
    unsigned int num1 = -20;
    int num2 = 6;
    cout<<num1+num2<<endl;

    cout<<foo(1,-1)<<endl;
    return 0;
}
