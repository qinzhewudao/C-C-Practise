/*
假设我们想在长度为n的字符串中求m个字符的组合。我们先从头扫描字符串的第一个字符。
针对第一个字符，我们有两种选择：第一是把这个字符放到组合中去，接下来我们需要在剩
下的n-1个字符中选取m-1个字符；第二是不把这个字符放到组合中去，接下来我们需要在剩
下的n-1个字符中选择m个字符。这两种选择都很容易用递归实现。下面是这种思路的参考代码：

*/
#include<iostream>
#include<vector>
#include<cstring>
#include<bits/stdc++.h>
using namespace std;
#include<assert.h>

void Combination(char *string ,int number,vector<char> &result);

void Combination(char *string)
{
    assert(string != NULL);
    vector<char> result;
    int i , length = strlen(string);
   // for(i = 1 ; i <= length ; ++i)  //打印字符串的长度

    Combination(string , 2 ,result);
}

void Combination(char *string ,int number , vector<char> &result)//第二个参数为想要组合的字符个数
{
    assert(string != NULL);
    if(number == 0)
    {
        static int num = 1;
        printf("第%d个组合\t",num++);

        vector<char>::iterator iter = result.begin();
        for( ; iter != result.end() ; ++iter)
            cout<<*iter;
        cout<<endl;
        return ;
    }
    if(*string == '\0')
        return ;
    result.push_back(*string);
    Combination(string + 1 , number - 1 , result);//选择当前字符
    result.pop_back();
    Combination(string + 1 , number , result);//不选当前字符
}

int main(void)
{
    char str[] = "abc";
    Combination(str);
    return 0;
}

